# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
  #vmImage: 'vs2017-win2016'

variables:
- name: APP_NAME
  value: fruit-service
- name: DATABASE_NAME
  value: my-database 
- name: BUILD_NAME
  value: $(APP_NAME) 
- name: BUILD_IMAGE_STREAM
  value: openshift/java:8 
- name: POM_VERSION
  value: 1.0.0
- name: DEV_PROJECT_NAME
  value: fruits-app-dev
- name: TEST_PROJECT_NAME
  value: fruits-app-test

jobs:
- job: Prepare

  steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'env | sort'
  - task: oc-setup@2
    inputs:
      connectionType: 'OpenShift Connection Service'
      openshiftService: 'OCP Cluster 1'
      #version: 'https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz'
      version: '4.5.9'

  - bash: |
      echo "This is job Prepare."
      echo "##vso[task.setvariable variable=DevProjectFoundName;isOutput=true]`oc get ns ${DEV_PROJECT_NAME} -o name`"
      echo "##vso[task.setvariable variable=TestProjectFoundName;isOutput=true]`oc get ns ${TEST_PROJECT_NAME} -o name`"   

      if [ -z "`oc get ns ${DEV_PROJECT_NAME} -o name`" ]
      then
            echo "${DEV_PROJECT_NAME} doesn't exist"
            echo "##vso[task.setvariable variable=DevProjectExists;isOutput=true]false"
      else
            echo "${DEV_PROJECT_NAME} exists"
            echo "##vso[task.setvariable variable=DevProjectExists;isOutput=true]true"
      fi
      if [ -z "`oc get ns ${TEST_PROJECT_NAME} -o name`" ]
      then
            echo "${TEST_PROJECT_NAME} doesn't exist"
            echo "##vso[task.setvariable variable=TestProjectExists;isOutput=true]false"
      else
            echo "${TEST_PROJECT_NAME} exists"
            echo "##vso[task.setvariable variable=TestProjectExists;isOutput=true]true"
      fi
    name: CheckProjects

  - bash: |
        oc new-project ${DEV_PROJECT_NAME}
    name: CreateDevProject
    condition: eq(variables['CheckProjects.DevProjectExists'], false)
  
  - bash: |
        oc new-project ${TEST_PROJECT_NAME}
    name: CreateTestProject
    condition: eq(variables['CheckProjects.TestProjectExists'], false)
    
  - script: echo $(CheckProjects.DevProjectFoundName)
    name: echoDevProjectFoundName
  - script: echo $(CheckProjects.TestProjectFoundName)
    name: echoTestProjectFoundName

  - bash: |
      if [ -z "`oc get dc ${DATABASE_NAME} -o name -n ${DEV_PROJECT_NAME}`" ]
      then
            echo "${DATABASE_NAME} doesn't exist in project ${DEV_PROJECT_NAME}"
            echo "##vso[task.setvariable variable=DevDatabaseDoesntExists;isOutput=true]true"
      else
            echo "${DATABASE_NAME} exists in project ${DEV_PROJECT_NAME}"
      fi
      if [ -z "`oc get dc ${DATABASE_NAME} -o name -n ${TEST_PROJECT_NAME}`" ]
      then
            echo "${DATABASE_NAME} doesn't exist in project ${TEST_PROJECT_NAME}"
            echo "##vso[task.setvariable variable=TestDatabaseDoesntExists;isOutput=true]true"
      else
            echo "${DATABASE_NAME} exists in project ${TEST_PROJECT_NAME}"
      fi
    name: CheckDatabases
    continueOnError: false

  - bash: |
        oc new-app -e POSTGRESQL_USER=luke -ePOSTGRESQL_PASSWORD=secret -ePOSTGRESQL_DATABASE=my_data centos/postgresql-10-centos7 --name=${DATABASE_NAME} --as-deployment-config -n ${DEV_PROJECT_NAME}
        oc label dc/${DATABASE_NAME} app.kubernetes.io/part-of=fruit-service-app --overwrite=true -n ${DEV_PROJECT_NAME} && \
        oc label dc/${DATABASE_NAME} app.openshift.io/runtime=postgresql --overwrite=true -n ${DEV_PROJECT_NAME} 
    name: DeployDevDatabase
    condition: eq(variables['CheckDatabases.DevDatabaseDoesntExists'], true)

  - bash: |
        oc new-app -e POSTGRESQL_USER=luke -ePOSTGRESQL_PASSWORD=secret -ePOSTGRESQL_DATABASE=my_data centos/postgresql-10-centos7 --name=${DATABASE_NAME} --as-deployment-config -n ${TEST_PROJECT_NAME}
            oc label dc/${DATABASE_NAME} app.kubernetes.io/part-of=fruit-service-app --overwrite=true -n ${TEST_PROJECT_NAME} && \
            oc label dc/${DATABASE_NAME} app.openshift.io/runtime=postgresql --overwrite=true -n ${TEST_PROJECT_NAME} 
    name: DeployTestDatabase
    condition: eq(variables['CheckDatabases.TestDatabaseDoesntExists'], true)

- job: Run
  variables:
    DevProjectName: $[ dependencies.Prepare.outputs['Prepare.CheckProjects.DevProjectFoundName'] ]

  steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'env | sort'
  - task: oc-setup@2
    inputs:
      connectionType: 'OpenShift Connection Service'
      openshiftService: 'OCP Cluster 1'
      #version: 'https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz'
      version: '4.5.9'

  - script: echo $(DevProjectName)
    name: echoDevProjectName
  - bash: |
      echo "This is job Run. $(agent.builddirectory) $(Build.ArtifactStagingDirectory)"

      echo "Build: $(Build)"
      echo "agent: $(agent)"

      echo "$(Build.ArtifactStagingDirectory)"
      ls $(Build.ArtifactStagingDirectory)
      echo "$(agent.builddirectory)"
      ls $(agent.builddirectory)
      if [ -z "`oc get ns ${DEV_PROJECT_NAME} -o name`" ]
      then
            echo "${DEV_PROJECT_NAME} doesn't exists"
            echo "##vso[task.setvariable variable=DevProjectExists;isOutput=true]false"
      else
            echo "${DEV_PROJECT_NAME} exists"
            echo "##vso[task.setvariable variable=DevProjectExists;isOutput=true]true"
      fi
    name: CheckProjects

  - task: Maven@3
    name: MavenTest
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      goals: 'test'
    enabled: true
  
  - task: Maven@3
    name: MavenPackage
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      goals: 'package -DskipTests -Popenshift'
    enabled: true

  - bash: |
      if [ -z "`oc get bc ${BUILD_NAME} -o name`" ]
      then
            echo "bc ${BUILD_NAME} doesn't exist"
            echo "##vso[task.setvariable variable=BuildConfigDoesntExists;isOutput=true]true"
      else
            echo "bc ${BUILD_NAME} exists"
            echo "##vso[task.setvariable variable=BuildConfigDoesntExists;isOutput=true]false"
      fi
    name: CheckBuildConfig

  - task: oc-cmd@2
    name: NewBuildConfig
    inputs:
      connectionType: 'OpenShift Connection Service'
      openshiftService: 'OCP Cluster 1'
      version: '4.5.9'
      uselocalOc: true
      cmd: 'new-build --name=$(BUILD_NAME) --image-stream=$(BUILD_IMAGE_STREAM) --binary -n $(DEV_PROJECT_NAME)'
      ignoreFlag: true
    #condition: eq('${{ variables['CheckBuildConfig.BuildConfigDoesntExists'] }}', true)
    condition: eq(variables['CheckBuildConfig.BuildConfigDoesntExists'], true)

  - task: oc-cmd@2
    name: StartBuild
    inputs:
      connectionType: 'OpenShift Connection Service'
      openshiftService: 'OCP Cluster 1'
      version: '4.5.9'
      uselocalOc: true
      cmd: 'start-build $(BUILD_NAME) --from-file=$(Build.Repository.LocalPath)/target/$(APP_NAME)-dev-$(POM_VERSION).jar --wait -n $(DEV_PROJECT_NAME)'

  - bash: |
      if [ -z "`oc get deployment ${APP_NAME} -o name`" ]
      then
            echo "deployment ${APP_NAME} doesn't exist"
            echo "##vso[task.setvariable variable=DevDeploymentDoesntExists;isOutput=true]true"
      else
            echo "deployment ${APP_NAME} exists"
            echo "##vso[task.setvariable variable=DevDeploymentDoesntExists;isOutput=true]false"
      fi
    name: CheckDevDeployment

  - task: oc-cmd@2
    name: NewDevDeployment
    inputs:
      connectionType: 'OpenShift Connection Service'
      openshiftService: 'OCP Cluster 1'
      version: '4.5.9'
      uselocalOc: true
      cmd: 'new-app --name=$(APP_NAME) $(DEV_PROJECT_NAME)/$(BUILD_NAME):latest -e DB_USERNAME=luke -e DB_PASSWORD=secret -e JAVA_OPTIONS=-Dspring.profiles.active=openshift -l app=${APP_NAME},version=${POM_VERSION},provider=jenkins -n $(DEV_PROJECT_NAME)'
      ignoreFlag: true
    condition: eq(variables['CheckDevDeployment.DevDeploymentDoesntExists'], true)

  - bash: |
      if [ -z "`oc get route ${APP_NAME} -o name -n ${DEV_PROJECT_NAME}`" ]
      then
            echo "route ${DevRouteDoesntExists} doesn't exist"
            echo "##vso[task.setvariable variable=DevRouteDoesntExists;isOutput=true]true"
      else
            echo "route ${DevRouteDoesntExists} exists"
            echo "##vso[task.setvariable variable=DevRouteDoesntExists;isOutput=true]false"
      fi
    name: CheckDevRoute

  - bash: |
      oc expose svc/${APP_NAME} -n ${DEV_PROJECT_NAME}
    name: ExposeDevSvc
    condition: eq(variables['CheckDevRoute.DevRouteDoesntExists'], true)

  - bash: |
      oc set probe deployment/${APP_NAME} --liveness --get-url=http://:8080/actuator/health --initial-delay-seconds=180 -n $(DEV_PROJECT_NAME)
      oc set probe deployment/${APP_NAME} --readiness --get-url=http://:8080/api/fruits --timeout-seconds=3 --initial-delay-seconds=10 -n $(DEV_PROJECT_NAME)
    name: AddDeploymentProbesToDev
    condition: eq(variables['CheckDevDeployment.DevDeploymentDoesntExists'], true)

  - bash: |
      oc label deployment/${APP_NAME} app.kubernetes.io/part-of=${APP_NAME}-app --overwrite=true -n ${DEV_PROJECT_NAME}
      oc label deployment/${APP_NAME} app.openshift.io/runtime=spring --overwrite=true -n $(DEV_PROJECT_NAME)
      oc annotate deployment/${APP_NAME} app.openshift.io/connects-to=my-database --overwrite=true -n ${DEV_PROJECT_NAME}
    name: AddDeploymentDecorationToDev
    condition: eq(variables['CheckDevDeployment.DevDeploymentDoesntExists'], true)

  - bash: |
      oc tag ${DEV_PROJECT_NAME}/${BUILD_NAME}:latest ${DEV_PROJECT_NAME}/${BUILD_NAME}:test
    name: PromoteToTest

  - bash: |
      if [ -z "`oc get deployment ${APP_NAME} -o name -n ${TEST_PROJECT_NAME}`" ]
      then
            echo "deployment ${APP_NAME} doesn't exist"
            echo "##vso[task.setvariable variable=TestDeploymentDoesntExists;isOutput=true]true"
      else
            echo "deployment ${APP_NAME} exists"
            echo "##vso[task.setvariable variable=TestDeploymentDoesntExists;isOutput=true]false"
      fi
    name: CheckTestDeployment
  - task: oc-cmd@2
    name: NewTestDeployment
    inputs:
      connectionType: 'OpenShift Connection Service'
      openshiftService: 'OCP Cluster 1'
      version: '4.5.9'
      uselocalOc: true
      cmd: 'new-app --name=$(APP_NAME) $(DEV_PROJECT_NAME)/$(BUILD_NAME):test -e DB_USERNAME=luke -e DB_PASSWORD=secret -e JAVA_OPTIONS=-Dspring.profiles.active=openshift -l app=${APP_NAME},version=${POM_VERSION},provider=jenkins -n $(TEST_PROJECT_NAME)'
      ignoreFlag: true
    condition: eq(variables['CheckTestDeployment.TestDeploymentDoesntExists'], true)

  - bash: |
      if [ -z "`oc get route ${APP_NAME} -o name -n ${TEST_PROJECT_NAME}`" ]
      then
            echo "route ${APP_NAME} doesn't exist"
            echo "##vso[task.setvariable variable=TestRouteDoesntExists;isOutput=true]true"
      else
            echo "route ${APP_NAME} exists"
            echo "##vso[task.setvariable variable=TestRouteDoesntExists;isOutput=true]false"
      fi
    name: CheckTestRoute

  - bash: |
      oc expose svc/${APP_NAME} -n ${TEST_PROJECT_NAME}
    name: ExposeTestSvc
    condition: eq(variables['CheckTestRoute.TestRouteDoesntExists'], true)

  - bash: |
      oc set probe deployment/${APP_NAME} --liveness --get-url=http://:8080/actuator/health --initial-delay-seconds=180 -n $(TEST_PROJECT_NAME)
      oc set probe deployment/${APP_NAME} --readiness --get-url=http://:8080/api/fruits --timeout-seconds=3 --initial-delay-seconds=10 -n $(TEST_PROJECT_NAME)
    name: AddDeploymentProbesToTest
    condition: eq(variables['CheckTestDeployment.TestDeploymentDoesntExists'], true)

  - bash: |
      oc label deployment/${APP_NAME} app.kubernetes.io/part-of=${APP_NAME}-app --overwrite=true -n ${TEST_PROJECT_NAME}
      oc label deployment/${APP_NAME} app.openshift.io/runtime=spring --overwrite=true -n $(TEST_PROJECT_NAME)
      oc annotate deployment/${APP_NAME} app.openshift.io/connects-to=my-database --overwrite=true -n ${TEST_PROJECT_NAME}
    name: AddDeploymentDecorationToTest
    condition: eq(variables['CheckTestDeployment.TestDeploymentDoesntExists'], true)
